{"version":3,"sources":["Components/Utils/ConstVar.js","Components/Nav/NavHeader.js","Components/Home/CharacterToDo.js","_data/characterDefinition.js","Components/Utils/AddCharacter.js","Components/GridItem/RestValue.js","Components/Home/CharacterAvatar.js","Components/Home/PerIdNote.js","Components/GridItem/DungeonAndEpona.js","Components/GridItem/AbyssAndRaid.js","Components/Home/CharacterToDoRow.js","Components/Home/Login.js","Components/Home/Register.js","App.js","index.js"],"names":["backendUrl","NavHeader","userIdString","cookie","get","userValue","JSON","parse","history","useHistory","axiosConfig","headers","Authorization","restValueBatch","a","searchString","axios","post","then","response","window","location","reload","catch","err","alert","Menu","style","backgroundColor","height","borderRadius","borderless","Item","Header","size","marginRight","marginLeft","color","fontStyle","Icon","name","padding","cursor","onClick","open","Popup","on","position","trigger","display","userName","Button","content","userId","set","remove","push","CharacterToDo","characterCdn","berserker","warlord","destroyer","holyknight","battlemaster","infighter","soulmaster","lancemaster","striker","devilhunter","blaster","hawkeye","scouter","gunslinger","summoner","arcana","bard","sorceress","blade","demonic","reaper","characterKorean","AddCharacter","addCharacterModal","closeAddCharacter","userTodoData","viewPage","limit","useState","selectCharacterModal","setSelectCharacterModal","selectedCharacter","setSelectedCharacter","characterName","setCharacterName","chaosRestValue","setChaosRestValue","guardianRestValue","setGuardianRestValue","eponaRestValue","setEponaRestValue","regex","regexNumber","inputRef","useRef","classSelected","event","selectedClass","target","className","indexOf","dataset","options","split","current","focus","closeAddCharacterModal","changeRestValue","data","preventDefault","test","value","id","changedValue","valueOutput","useEffect","eventAdd","classElements","document","getElementsByClassName","index","length","addEventListener","removeEventListener","Modal","onClose","closeIcon","closeOnDimmerClick","Content","as","Image","src","avatar","Input","transparent","placeholder","ref","onChange","insertedValue","changeInputCharName","List","divided","selection","Label","horizontal","justifyContent","circular","icon","createdData","character","date","Date","now","chaosDone","guardianDone","eponaDone","guardianWeeklyDone","abyssDungeon2","argos","baltan","biakiss","kukuseitn","abrel","attributeChanged","weeklyAttributeChanged","createdAt","totalLength","toast","error","POSITION","BOTTOM_LEFT","borderBottom","Grid","columns","Row","Column","marginTop","autoClose","RestValue","item","setUserTodoData","showModal","setShowModal","element","getElementById","_id","rightclickEvent","closeModal","chaosRestValueChange","setChaosRestValueChange","guardianRestValueChange","setGuardianRestValueChange","eponaRestValueChange","setEponaRestValueChange","valueChange","e","TextField","type","label","Actions","negative","positive","indexValue","findIndex","anItem","newArr","CharacterAvatar","itemId","alarmCharacter","dontChange","deleteIcon","showDeleteIcon","showDontChange","setShowDontChange","dontChangeState","setDontChangeState","delete","console","log","message","dontChangeCharacter","PerIdNote","showTextArea","setShowTextArea","note","textValue","setTextValue","changeText","theText","TextArea","inverted","ChaosDunValue","chaosItem","key","text","chaosData","setChaosData","paddingTop","Dropdown","changeData","GuardianDunValue","guardianItem","guardianData","setGuardianData","EponaValue","eponaItem","eponaData","setEponaData","WeeklyGuardian","weeklyGuardianItem","weeklyGuardianData","setWeeklyGuardianData","changeDatafunction","setItem","findIndexItem","changeItem","checked","attrChanged","AbyssDun2","abyssDun2Item","abyssDun2","setAbyssDun2","Checkbox","ArgosRaid","argosRaidItem","argosRaid","setArgosRaid","BaltanRaid","baltanRaidItem","baltanRaid","setBaltanRaid","BiakissRaid","biakissRaidItem","biakissRaid","setBiakissRaid","KukseitnRaid","kukseitnRaidItem","kukseitnRaid","setKukseitnRaid","AbrelRaid","abrelRaidItem","abrelRaid","setAbrelRaid","CharacterToDoRow","todayDate","today","getFullYear","getMonth","getDate","setAddCharacterModal","loading","setLoading","activePage","setActivePage","pagination","setPagination","minusOne","plusOne","plusPage","Math","floor","totalPage","applyChanges","errorOccured","submitData","filter","put","pageChange","alarmTrue","setAlarmTrue","showNote","setShowNote","Segment","border","Dimmer","active","Loader","Container","width","basic","marginBottom","Pagination","firstItem","lastItem","pointing","secondary","totalPages","onPageChange","todoList","alarmList","map","idx","alarmList1","alarmRestValue","paddingBottom","Login","loginMessage","setLoginMessage","password","user","setUser","handleChange","prev","textAlign","verticalAlign","maxWidth","Form","onSubmit","success","token","userCookie","stringify","stacked","fluid","iconPosition","Message","href","Register","AppMedia","createMedia","breakpoints","zero","mobile","tablet","computer","Media","createMediaStyle","MediaContextProvider","App","path","stackable","background","between","greaterThanOrEqual","exact","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c0847c19.chunk.js","sourcesContent":["// const backendUrl = 'https://loado-app.herokuapp.com';\r\nconst backendUrl = 'https://loado-backend.herokuapp.com';\r\n// const backendUrl = 'http://localhost:5000';\r\n\r\nexport default backendUrl;\r\n","import React from 'react';\r\nimport { Menu, Header, Icon, Popup, Button } from 'semantic-ui-react';\r\nimport cookie from 'js-cookie';\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport backendUrl from '../Utils/ConstVar';\r\n\r\nfunction NavHeader() {\r\n  let userIdString = cookie.get('loadoUserCookie');\r\n  let userValue = userIdString && JSON.parse(userIdString);\r\n  const history = useHistory();\r\n\r\n  const logoutUser = (userId) => {\r\n    cookie.set('loginId', userId);\r\n    cookie.remove('loadoUserCookie');\r\n    cookie.remove('token');\r\n    history.push('/login');\r\n  };\r\n\r\n  const axiosConfig = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${cookie.get('loadoUserToken')}`,\r\n    },\r\n  };\r\n\r\n  const restValueBatch = async () => {\r\n    let searchString = `${backendUrl}/loado/api/homeworks/loadoupdatepersonal`;\r\n    axios\r\n      .post(searchString, {}, axiosConfig)\r\n      .then((response) => {\r\n        window.location.reload();\r\n      })\r\n      .catch((err) => {\r\n        alert('휴식게이지를 반영하지 못했습니다');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Menu\r\n        style={{\r\n          backgroundColor: 'lightcoral',\r\n          height: '6vh',\r\n          borderRadius: '0px',\r\n        }}\r\n        borderless\r\n      >\r\n        <Menu.Item>\r\n          <Header\r\n            size='large'\r\n            style={{ marginRight: '150px', marginLeft: '50px', color: 'white' }}\r\n          >\r\n            <span style={{ fontStyle: 'italic' }}>\r\n              <Icon name='game' />\r\n              LoaDo\r\n            </span>\r\n          </Header>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <Header\r\n            size='small'\r\n            style={{ color: 'white', padding: '0 50px', cursor: 'pointer' }}\r\n            onClick={() =>\r\n              window.open(\r\n                'https://github.com/biglol10/loado-react/blob/main/README.md'\r\n              )\r\n            }\r\n          >\r\n            <Icon name='list ul' />\r\n            기능소개\r\n          </Header>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <Header\r\n            size='small'\r\n            style={{ color: 'white', padding: '0 50px', cursor: 'pointer' }}\r\n            onClick={() => restValueBatch()}\r\n          >\r\n            <Icon name='box' />\r\n            휴식게이지반영\r\n          </Header>\r\n        </Menu.Item>\r\n        <Menu.Item style={{ marginLeft: 'auto', marginRight: '50px' }}>\r\n          <Popup\r\n            on='click'\r\n            position='top right'\r\n            trigger={\r\n              <Header\r\n                size='small'\r\n                style={{\r\n                  color: 'white',\r\n                  padding: '0 50px',\r\n                  display: 'flex',\r\n                  cursor: 'pointer',\r\n                }}\r\n              >\r\n                <Icon name='user' />\r\n                {userValue && userValue.userName}\r\n              </Header>\r\n            }\r\n          >\r\n            <p>로그아웃 하시겠습니까?</p>\r\n            <Button\r\n              color='red'\r\n              content='로그아웃'\r\n              onClick={() => logoutUser(userValue.userId)}\r\n            />\r\n          </Popup>\r\n        </Menu.Item>\r\n      </Menu>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NavHeader;\r\n","import React, { useState } from \"react\";\r\nimport \"./CharacterToDo.css\";\r\nimport { Header, Button, Segment, Grid, Container } from \"semantic-ui-react\";\r\nimport TodoComponent from \"../Todo/TodoComponent\";\r\nimport todoData from \"../../_data/todoData.js\";\r\n\r\nfunction CharacterToDo() {\r\n  const todayDate = new Date(Date.now());\r\n  const today = `${todayDate.getFullYear()}-${\r\n    todayDate.getMonth() + 1\r\n  }-${todayDate.getDate()}`;\r\n\r\n  const [userTodoData, setUserTodoData] = useState(todoData);\r\n\r\n  const [iconId, setIconId] = useState(\"\");\r\n\r\n  const [changedList, setChangedList] = useState([]);\r\n\r\n  return (\r\n    <>\r\n      <Grid className=\"fullPage\">\r\n        <Container\r\n          style={{ width: \"95%\", marginLeft: \"2.5%\", marginRight: \"2.5%\" }}\r\n        >\r\n          <Grid.Column width={16}>\r\n            <Segment basic style={{ marginBottom: \"0px\" }}>\r\n              <Header\r\n                size=\"huge\"\r\n                style={{ color: \"deepskyblue\", textAlign: \"center\" }}\r\n              >\r\n                로아 숙제관리\r\n              </Header>\r\n            </Segment>\r\n            <Segment basic className=\"contentHeader\">\r\n              <div className=\"headerValueStart\">\r\n                <Header size=\"medium\" style={{ color: \"white\" }}>\r\n                  {today}{\" \"}\r\n                  <span style={{ marginLeft: \"40px\" }}>\r\n                    금일 06:00 ~ 명일 05:59\r\n                  </span>\r\n                </Header>\r\n              </div>\r\n              <div className=\"headerValueEnd\">\r\n                <Button inverted color=\"red\">\r\n                  변경사항 저장\r\n                </Button>\r\n              </div>\r\n            </Segment>\r\n            <Segment basic style={{ backgroundColor: \"slategrey\" }}>\r\n              <Grid columns={16}>\r\n                <Grid.Row style={{ borderBottom: \"0.05rem inset ivory\" }}>\r\n                  <Grid.Column style={{ width: \"150px\" }}></Grid.Column>\r\n                  <Grid.Column width={2}>휴식게이지</Grid.Column>\r\n                  <Grid.Column width={12}>\r\n                    <Grid columns=\"equal\">\r\n                      <Grid.Row>\r\n                        <Grid.Column>카오스던전</Grid.Column>\r\n                        <Grid.Column>가디언토벌</Grid.Column>\r\n                        <Grid.Column>에포나</Grid.Column>\r\n                        <Grid.Column>가디언레이드</Grid.Column>\r\n                        <Grid.Column>어비스2종</Grid.Column>\r\n                        <Grid.Column width={2}>주간던전</Grid.Column>\r\n                        <Grid.Column>아르고스</Grid.Column>\r\n                        <Grid.Column>발탄</Grid.Column>\r\n                        <Grid.Column>비아키스</Grid.Column>\r\n                        <Grid.Column>쿠크세이튼</Grid.Column>\r\n                        <Grid.Column>아브렐슈드</Grid.Column>\r\n                      </Grid.Row>\r\n                    </Grid>\r\n                  </Grid.Column>\r\n                </Grid.Row>\r\n                {userTodoData.map((item, idx) => (\r\n                  <TodoComponent\r\n                    listId={item._id}\r\n                    userTodoData={item}\r\n                    setUserTodoData={setUserTodoData}\r\n                    iconId={iconId}\r\n                    setIconId={setIconId}\r\n                    setChangedList={setChangedList}\r\n                    thisItemChanged={\r\n                      changedList.includes(item._id)\r\n                        ? \"thisItemChanged\"\r\n                        : \"thisItemNotChanged\"\r\n                    }\r\n                  />\r\n                ))}\r\n              </Grid>\r\n            </Segment>\r\n          </Grid.Column>\r\n        </Container>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CharacterToDo;\r\n","const characterCdn = {\r\n  berserker:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/berserker_s.png\",\r\n  warlord:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/warlord_s.png\",\r\n  destroyer:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/destroyer_s.png\",\r\n  holyknight:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/holyknight_s.png\",\r\n  battlemaster:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/battlemaster_s.png\",\r\n  infighter:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/infighter_s.png\",\r\n  soulmaster:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/soulmaster_s.png\",\r\n  lancemaster:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/lancemaster_s.png\",\r\n  striker:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/striker_s.png\",\r\n  devilhunter:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/devilhunter_s.png\",\r\n  blaster:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/blaster_s.png\",\r\n  hawkeye:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/hawkeye_s.png\",\r\n  scouter:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/scouter_s.png\",\r\n  gunslinger:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/gunslinger_s.png\",\r\n  summoner:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/summoner_s.png\",\r\n  arcana:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/arcana_s.png\",\r\n  bard: \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/bard_s.png\",\r\n  sorceress:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/sorceress_s.png\",\r\n  blade:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/blade_s.png\",\r\n  demonic:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/demonic_s.png\",\r\n  reaper:\r\n    \"https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/reaper_s.png\",\r\n};\r\n\r\nconst characterKorean = {\r\n  arcana: \"아르카나\",\r\n  bard: \"바드\",\r\n  battlemaster: \"배틀마스터\",\r\n  berserker: \"버서커\",\r\n  blade: \"블레이드\",\r\n  blaster: \"블래스터\",\r\n  demonic: \"데모닉\",\r\n  destroyer: \"디스트로이어\",\r\n  devilhunter: \"데빌헌터\",\r\n  gunslinger: \"건슬링어\",\r\n  hawkeye: \"호크아이\",\r\n  holyknight: \"홀리나이트\",\r\n  infighter: \"인파이터\",\r\n  lancemaster: \"창술사\",\r\n  reaper: \"리퍼\",\r\n  scouter: \"스카우터\",\r\n  sorceress: \"소서리스\",\r\n  soulmaster: \"기공사\",\r\n  striker: \"스트라이커\",\r\n  summoner: \"서머너\",\r\n  warlord: \"워로드\",\r\n};\r\n\r\nexport { characterCdn, characterKorean };\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n  Modal,\r\n  Icon,\r\n  Grid,\r\n  Image,\r\n  Header,\r\n  Input,\r\n  Label,\r\n  List,\r\n  Button,\r\n} from 'semantic-ui-react';\r\nimport { characterCdn, characterKorean } from '../../_data/characterDefinition';\r\nimport axios from 'axios';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport backendUrl from '../Utils/ConstVar';\r\n\r\nimport './AddCharacter.css';\r\n\r\nfunction AddCharacter({\r\n  addCharacterModal,\r\n  closeAddCharacter,\r\n  userTodoData,\r\n  axiosConfig,\r\n  viewPage,\r\n  limit,\r\n}) {\r\n  const [selectCharacterModal, setSelectCharacterModal] = useState(false);\r\n  const [selectedCharacter, setSelectedCharacter] = useState('');\r\n  const [characterName, setCharacterName] = useState('');\r\n  const [chaosRestValue, setChaosRestValue] = useState(0);\r\n  const [guardianRestValue, setGuardianRestValue] = useState(0);\r\n  const [eponaRestValue, setEponaRestValue] = useState(0);\r\n  const regex = /^[ㄱ-ㅎ|가-힣|a-z|A-Z|0-9|]+$/;\r\n  const regexNumber = /^[0-9]+$/;\r\n\r\n  const inputRef = useRef();\r\n\r\n  const closeSelectCharacter = () => setSelectCharacterModal(false);\r\n\r\n  const modalShow = () => {\r\n    setSelectCharacterModal(true);\r\n  };\r\n\r\n  const classSelected = (event) => {\r\n    let selectedClass;\r\n    if (event.target.className.indexOf('image') > 0) {\r\n      selectedClass = event.target.dataset.options;\r\n    } else {\r\n      selectedClass = event.target.className.split(' ')[2];\r\n    }\r\n    setSelectedCharacter(selectedClass);\r\n    setSelectCharacterModal(false);\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const closeAddCharacterModal = () => {\r\n    setSelectedCharacter('');\r\n    setCharacterName('');\r\n    setChaosRestValue(0);\r\n    setGuardianRestValue(0);\r\n    setEponaRestValue(0);\r\n    closeAddCharacter();\r\n  };\r\n\r\n  const changeInputCharName = (event, data) => {\r\n    const insertedValue = data.value;\r\n    if (insertedValue.length === 0) {\r\n      setCharacterName('');\r\n      return;\r\n    }\r\n    if (!regex.test(insertedValue) || insertedValue.length > 12) return;\r\n    setCharacterName(insertedValue);\r\n  };\r\n\r\n  const changeRestValue = (event, data) => {\r\n    event.preventDefault();\r\n    if (!regexNumber.test(event.target.value)) return;\r\n    if (event.target.id === 'chaosChange') {\r\n      const changedValue = event.target.value;\r\n      const valueOutput = chaosRestValue + (changedValue - chaosRestValue) * 10;\r\n      if (valueOutput < 0) setChaosRestValue(0);\r\n      else if (0 <= valueOutput && valueOutput <= 100)\r\n        setChaosRestValue(valueOutput);\r\n      else setChaosRestValue(100);\r\n    }\r\n    if (event.target.id === 'guardianChange') {\r\n      const changedValue = event.target.value;\r\n      const valueOutput =\r\n        guardianRestValue + (changedValue - guardianRestValue) * 10;\r\n      if (valueOutput < 0) setGuardianRestValue(0);\r\n      else if (0 <= valueOutput && valueOutput <= 100)\r\n        setGuardianRestValue(valueOutput);\r\n      else setGuardianRestValue(100);\r\n    }\r\n    if (event.target.id === 'eponaChange') {\r\n      const changedValue = event.target.value;\r\n      const valueOutput = eponaRestValue + (changedValue - eponaRestValue) * 10;\r\n      if (valueOutput < 0) setEponaRestValue(0);\r\n      else if (0 <= valueOutput && valueOutput <= 100)\r\n        setEponaRestValue(valueOutput);\r\n      else setEponaRestValue(100);\r\n    }\r\n  };\r\n\r\n  const confirmAddCharacter = () => {\r\n    const createdData = {\r\n      // _id: \"5d725a037b292f5f8ceff795\",\r\n      // user: \"5d7a514b5d2c12c7449be042\",\r\n      character: selectedCharacter,\r\n      characterName: characterName,\r\n      date: Date.now(),\r\n      // idx: 2,\r\n      chaosRestValue,\r\n      guardianRestValue,\r\n      eponaRestValue,\r\n      chaosDone: 0,\r\n      guardianDone: 0,\r\n      eponaDone: 0,\r\n      guardianWeeklyDone: 0,\r\n      abyssDungeon2: false,\r\n      // abyssDungeonWeekly: true,\r\n      // rehearsalAndDejavu: [\"kukuseitn\", \"abrel\"],\r\n      argos: false,\r\n      baltan: false,\r\n      biakiss: false,\r\n      kukuseitn: false,\r\n      abrel: false,\r\n      attributeChanged: false,\r\n      weeklyAttributeChanged: false,\r\n      createdAt: Date.now(),\r\n    };\r\n    axios\r\n      .post(`${backendUrl}/loado/api/homeworks`, createdData, axiosConfig)\r\n      .then((response) => {\r\n        // setUserTodoData([...userTodoData, response.data.data]);\r\n        if (\r\n          response.data.totalLength > 0 &&\r\n          userTodoData.length % limit === 0\r\n        ) {\r\n          viewPage(false, true, response.data.totalLength);\r\n        } else {\r\n          viewPage(false, false);\r\n        }\r\n        closeAddCharacterModal();\r\n      })\r\n      .catch((err) => {\r\n        toast.error(err.response.data.error, {\r\n          position: toast.POSITION.BOTTOM_LEFT,\r\n        });\r\n        closeAddCharacterModal();\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const classElements = document.getElementsByClassName(\r\n      'characterClassContent'\r\n    );\r\n    let eventAdd;\r\n    for (let index = 0; index < classElements.length; index++) {\r\n      eventAdd = classElements[index].addEventListener('click', (event) => {\r\n        classSelected(event);\r\n      });\r\n    }\r\n    return () => {\r\n      for (let index = 0; index < classElements.length; index++) {\r\n        classElements[index].removeEventListener('click', eventAdd);\r\n      }\r\n    };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        size='mini'\r\n        open={addCharacterModal}\r\n        onClose={closeAddCharacterModal}\r\n        closeIcon\r\n        closeOnDimmerClick\r\n        // centered={false}\r\n      >\r\n        <Modal.Content style={{ backgroundColor: 'dimgray' }}>\r\n          <Header className='itemHeader' as='h4'>\r\n            {!selectedCharacter ? (\r\n              <>\r\n                <span className='itemHeaderAttribute1'>클래스:</span>\r\n                <Icon\r\n                  name='add square'\r\n                  size='large'\r\n                  color='white'\r\n                  onClick={modalShow}\r\n                  style={{ cursor: 'pointer' }}\r\n                />\r\n              </>\r\n            ) : (\r\n              <>\r\n                <span className='itemHeaderAttribute2'>클래스:</span>\r\n                <span onClick={() => setSelectCharacterModal(true)}>\r\n                  <Image\r\n                    src={characterCdn[selectedCharacter]}\r\n                    size='mini'\r\n                    avatar\r\n                  />\r\n                  {characterKorean[selectedCharacter]}\r\n                </span>\r\n              </>\r\n            )}\r\n          </Header>\r\n          <Header className='itemHeader' as='h4'>\r\n            <span style={{ marginRight: '40px' }}>케릭명:</span>\r\n            <Input\r\n              transparent\r\n              placeholder='케릭터명'\r\n              style={{ color: 'white' }}\r\n              className='charNameInput'\r\n              value={characterName}\r\n              ref={inputRef}\r\n              onChange={(event, data) => changeInputCharName(event, data)}\r\n            />\r\n          </Header>\r\n          <Header className='itemHeaderRest' as='h4'>\r\n            <List divided selection>\r\n              <List.Item>\r\n                <Label horizontal>카오스던전</Label>\r\n                <Input\r\n                  transparent\r\n                  style={{ color: 'white' }}\r\n                  className='charNameInput'\r\n                  value={chaosRestValue}\r\n                  id='chaosChange'\r\n                  onChange={(event, data) => changeRestValue(event, data)}\r\n                />\r\n              </List.Item>\r\n              <List.Item>\r\n                <Label horizontal>가디언던전</Label>\r\n                <Input\r\n                  transparent\r\n                  style={{ color: 'white' }}\r\n                  className='charNameInput'\r\n                  value={guardianRestValue}\r\n                  id='guardianChange'\r\n                  onChange={(event, data) => changeRestValue(event, data)}\r\n                />\r\n              </List.Item>\r\n              <List.Item>\r\n                <Label horizontal>에포나</Label>\r\n                <Input\r\n                  transparent\r\n                  style={{ color: 'white' }}\r\n                  className='charNameInput'\r\n                  value={eponaRestValue}\r\n                  id='eponaChange'\r\n                  onChange={(event, data) => changeRestValue(event, data)}\r\n                />\r\n              </List.Item>\r\n            </List>\r\n          </Header>\r\n          <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n            <Button\r\n              circular\r\n              color='google plus'\r\n              icon='cancel'\r\n              onClick={closeAddCharacterModal}\r\n            />\r\n            <Button\r\n              circular\r\n              color='twitter'\r\n              icon='check'\r\n              onClick={confirmAddCharacter}\r\n            />\r\n          </div>\r\n        </Modal.Content>\r\n      </Modal>\r\n      <Modal\r\n        open={selectCharacterModal}\r\n        onClose={closeSelectCharacter}\r\n        closeOnDimmerClick\r\n        // centered={false}\r\n        className='classSelectModal'\r\n      >\r\n        <Modal.Header\r\n          style={{\r\n            backgroundColor: '#384862',\r\n            color: 'white',\r\n            borderBottom: '1px solid white',\r\n          }}\r\n        >\r\n          클래스\r\n        </Modal.Header>\r\n        <Modal.Content style={{ backgroundColor: '#384862', color: 'white' }}>\r\n          <Grid columns={6}>\r\n            <Grid.Row>\r\n              <Grid.Column className='characterClassHeader'>\r\n                <Header as='h4' style={{ marginTop: '6px', color: 'white' }}>\r\n                  전사\r\n                </Header>\r\n              </Grid.Column>\r\n              <Grid.Column\r\n                className='characterClassContent berserker'\r\n                name='berserker'\r\n              >\r\n                <Image\r\n                  src={characterCdn.berserker}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='berserker'\r\n                />\r\n                버서커\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent warlord'>\r\n                <Image\r\n                  src={characterCdn.warlord}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='warlord'\r\n                />\r\n                워로드\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent destroyer'>\r\n                <Image\r\n                  src={characterCdn.destroyer}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='destroyer'\r\n                />\r\n                디스트로이어\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent holyknight'>\r\n                <Image\r\n                  src={characterCdn.holyknight}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='holyknight'\r\n                />\r\n                홀리나이트\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Grid.Column className='characterClassHeader'>\r\n                <Header as='h4' style={{ marginTop: '6px', color: 'white' }}>\r\n                  무도가\r\n                </Header>\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent battlemaster'>\r\n                <Image\r\n                  src={characterCdn.battlemaster}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='battlemaster'\r\n                />\r\n                배틀마스터\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent infighter'>\r\n                <Image\r\n                  src={characterCdn.infighter}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='infighter'\r\n                />\r\n                인파이터\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent soulmaster'>\r\n                <Image\r\n                  src={characterCdn.soulmaster}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='soulmaster'\r\n                />\r\n                기공사\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent lancemaster'>\r\n                <Image\r\n                  src={characterCdn.lancemaster}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='lancemaster'\r\n                />\r\n                창술사\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent striker'>\r\n                <Image\r\n                  src={characterCdn.striker}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='striker'\r\n                />\r\n                스트라이커\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Grid.Column className='characterClassHeader'>\r\n                <Header as='h4' style={{ marginTop: '6px', color: 'white' }}>\r\n                  헌터\r\n                </Header>\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent devilhunter'>\r\n                <Image\r\n                  src={characterCdn.devilhunter}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='devilhunter'\r\n                />\r\n                데빌헌터\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent blaster'>\r\n                <Image\r\n                  src={characterCdn.blaster}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='blaster'\r\n                />\r\n                블래스터\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent hawkeye'>\r\n                <Image\r\n                  src={characterCdn.hawkeye}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='hawkeye'\r\n                />\r\n                호크아이\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent scouter'>\r\n                <Image\r\n                  src={characterCdn.scouter}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='scouter'\r\n                />\r\n                스카우터\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent gunslinger'>\r\n                <Image\r\n                  src={characterCdn.gunslinger}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='gunslinger'\r\n                />\r\n                건슬링어\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Grid.Column className='characterClassHeader'>\r\n                <Header as='h4' style={{ marginTop: '6px', color: 'white' }}>\r\n                  마법사\r\n                </Header>\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent summoner'>\r\n                <Image\r\n                  src={characterCdn.summoner}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='summoner'\r\n                />\r\n                서머너\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent arcana'>\r\n                <Image\r\n                  src={characterCdn.arcana}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='arcana'\r\n                />\r\n                아르카나\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent bard'>\r\n                <Image\r\n                  src={characterCdn.bard}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='bard'\r\n                />\r\n                바드\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent sorceress'>\r\n                <Image\r\n                  src={characterCdn.sorceress}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='sorceress'\r\n                />\r\n                소서리스\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Grid.Column className='characterClassHeader'>\r\n                <Header as='h4' style={{ marginTop: '6px', color: 'white' }}>\r\n                  암살자\r\n                </Header>\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent blade'>\r\n                <Image\r\n                  src={characterCdn.blade}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='blade'\r\n                />\r\n                블레이드\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent demonic'>\r\n                <Image\r\n                  src={characterCdn.demonic}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='demonic'\r\n                />\r\n                데모닉\r\n              </Grid.Column>\r\n              <Grid.Column className='characterClassContent reaper'>\r\n                <Image\r\n                  src={characterCdn.reaper}\r\n                  size='mini'\r\n                  avatar\r\n                  data-options='reaper'\r\n                />\r\n                리퍼\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        </Modal.Content>\r\n      </Modal>\r\n      <ToastContainer autoClose={3000} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddCharacter;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Modal, Image, Button } from \"semantic-ui-react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { characterCdn } from \"../../_data/characterDefinition\";\r\n\r\nfunction RestValue({ item, userTodoData, setUserTodoData }) {\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let element = document.getElementById(item._id);\r\n    const rightclickEvent = element.addEventListener(\"contextmenu\", (event) => {\r\n      event.preventDefault();\r\n      setShowModal(true);\r\n    });\r\n    return () => {\r\n      element.removeEventListener(\"contextmenu\", rightclickEvent);\r\n    };\r\n  });\r\n\r\n  // if you use setShowModal directly in Modal onClose, react will throw error\r\n  const closeModal = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  const [chaosRestValue, setChaosRestValue] = useState(item.chaosRestValue);\r\n  const [guardianRestValue, setGuardianRestValue] = useState(\r\n    item.guardianRestValue\r\n  );\r\n  const [eponaRestValue, setEponaRestValue] = useState(item.eponaRestValue);\r\n\r\n  const [chaosRestValueChange, setChaosRestValueChange] = useState(\r\n    item.chaosRestValue\r\n  );\r\n  const [guardianRestValueChange, setGuardianRestValueChange] = useState(\r\n    item.guardianRestValue\r\n  );\r\n  const [eponaRestValueChange, setEponaRestValueChange] = useState(\r\n    item.eponaRestValue\r\n  );\r\n\r\n  const valueChange = (e) => {\r\n    e.preventDefault();\r\n    if (e.target.id === \"chaosChange\") {\r\n      const changedValue = e.target.value;\r\n      const valueOutput =\r\n        chaosRestValueChange + (changedValue - chaosRestValueChange) * 10;\r\n      if (valueOutput < 0) setChaosRestValueChange(0);\r\n      else if (0 <= valueOutput && valueOutput <= 100)\r\n        setChaosRestValueChange(valueOutput);\r\n      else setChaosRestValueChange(100);\r\n\r\n      return;\r\n    }\r\n    if (e.target.id === \"guardianChange\") {\r\n      const changedValue = e.target.value;\r\n      const valueOutput =\r\n        guardianRestValueChange + (changedValue - guardianRestValueChange) * 10;\r\n      if (valueOutput < 0) setGuardianRestValueChange(0);\r\n      else if (0 <= valueOutput && valueOutput <= 100)\r\n        setGuardianRestValueChange(valueOutput);\r\n      else setGuardianRestValueChange(100);\r\n\r\n      return;\r\n    }\r\n    if (e.target.id === \"eponaChange\") {\r\n      const changedValue = e.target.value;\r\n      const valueOutput =\r\n        eponaRestValueChange + (changedValue - eponaRestValueChange) * 10;\r\n      if (valueOutput < 0) setEponaRestValueChange(0);\r\n      else if (0 <= valueOutput && valueOutput <= 100)\r\n        setEponaRestValueChange(valueOutput);\r\n      else setEponaRestValueChange(100);\r\n\r\n      return;\r\n    }\r\n  };\r\n\r\n  const confirmValue = () => {\r\n    const indexValue = userTodoData.findIndex((anItem) => {\r\n      return anItem._id === item._id;\r\n    });\r\n    let newArr = [...userTodoData];\r\n    newArr[indexValue][\"chaosRestValue\"] = chaosRestValueChange;\r\n    newArr[indexValue][\"guardianRestValue\"] = guardianRestValueChange;\r\n    newArr[indexValue][\"eponaRestValue\"] = eponaRestValueChange;\r\n    newArr[indexValue][\"attributeChanged\"] = true;\r\n    setUserTodoData(newArr);\r\n    closeModal();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid.Column id={item._id}>\r\n        카던: {item.chaosRestValue}\r\n        <br />\r\n        가디언: {item.guardianRestValue}\r\n        <br />\r\n        에포나: {item.eponaRestValue}\r\n      </Grid.Column>\r\n      <Modal\r\n        size=\"mini\"\r\n        open={showModal}\r\n        onClose={closeModal}\r\n        closeIcon\r\n        closeOnDimmerClick\r\n      >\r\n        <Modal.Header>\r\n          <Image src={characterCdn[item.character]} size=\"mini\" avatar />\r\n          {item.characterName}\r\n        </Modal.Header>\r\n        <Modal.Content>\r\n          <TextField\r\n            id=\"chaosChange\"\r\n            type=\"number\"\r\n            label=\"카오스던전\"\r\n            onChange={(e) => valueChange(e)}\r\n            value={chaosRestValueChange}\r\n          />\r\n          <TextField\r\n            id=\"guardianChange\"\r\n            type=\"number\"\r\n            label=\"가디언토벌\"\r\n            onChange={(e) => valueChange(e)}\r\n            value={guardianRestValueChange}\r\n          />\r\n          <TextField\r\n            id=\"eponaChange\"\r\n            type=\"number\"\r\n            label=\"에포나\"\r\n            onChange={(e) => valueChange(e)}\r\n            value={eponaRestValueChange}\r\n          />\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button negative onClick={closeModal}>\r\n            취소\r\n          </Button>\r\n          <Button positive onClick={confirmValue}>\r\n            확인\r\n          </Button>\r\n        </Modal.Actions>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RestValue;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Image, Icon, Popup } from \"semantic-ui-react\";\r\nimport { characterCdn } from \"../../_data/characterDefinition\";\r\nimport axios from \"axios\";\r\nimport cookie from \"js-cookie\";\r\nimport \"./CharacterAvatarCss.css\";\r\nimport backendUrl from \"../Utils/ConstVar\";\r\n\r\nfunction CharacterAvatar({\r\n  itemId,\r\n  character,\r\n  characterName,\r\n  attributeChanged,\r\n  weeklyAttributeChanged,\r\n  axiosConfig,\r\n  viewPage,\r\n  alarmCharacter,\r\n  limit,\r\n  dontChange,\r\n  userTodoData,\r\n  setUserTodoData,\r\n}) {\r\n  const [deleteIcon, showDeleteIcon] = useState(false);\r\n\r\n  const [showDontChange, setShowDontChange] = useState(false);\r\n\r\n  const [dontChangeState, setDontChangeState] = useState(dontChange);\r\n\r\n  const [alarmState, setAlarmState] = useState(\"\");\r\n\r\n  const deleteCharacter = (id) => {\r\n    // console.log(id);\r\n    // const indexValue = userTodoData.findIndex((anItem) => {\r\n    //   return anItem._id === id;\r\n    // });\r\n    // let newArr = [...userTodoData];\r\n    // newArr.splice(indexValue, 1);\r\n    // setUserTodoData(newArr);\r\n    // showDeleteIcon(false);\r\n\r\n    axios\r\n      .delete(`${backendUrl}/loado/api/homeworks/${itemId}`, axiosConfig)\r\n      .then((response) => {\r\n        if (\r\n          response.data.totalLength > 0 &&\r\n          response.data.totalLength % limit === 0\r\n        ) {\r\n          viewPage(true, false);\r\n        } else {\r\n          viewPage(false, false);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.message);\r\n      });\r\n    showDeleteIcon(false);\r\n  };\r\n\r\n  const dontChangeCharacter = (id) => {\r\n    const indexValue = userTodoData.findIndex((anItem) => {\r\n      return anItem._id === id;\r\n    });\r\n    let newArr = [...userTodoData];\r\n    newArr[indexValue].dontChange = !dontChange;\r\n    newArr[indexValue][\"attributeChanged\"] = true;\r\n    setDontChangeState(!dontChangeState);\r\n    setUserTodoData(newArr);\r\n    showDeleteIcon(false);\r\n  };\r\n\r\n  // 원래 1회 실행으로 useEffect에 []를 넣었지만 이걸 넣으니 되돌아가기가 안됨... 그래서 [] 빼보니 됨\r\n  useEffect(() => {\r\n    let element = document.getElementById(`${itemId}_${characterName}`);\r\n    const rightclickEvent = element.addEventListener(\"contextmenu\", (event) => {\r\n      event.preventDefault();\r\n      setShowDontChange(!showDontChange);\r\n    });\r\n    return () => {\r\n      element.removeEventListener(\"contextmenu\", rightclickEvent);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Grid.Column>\r\n        <Image\r\n          src={characterCdn[character]}\r\n          size=\"mini\"\r\n          avatar\r\n          onClick={() => showDeleteIcon(!deleteIcon)}\r\n        />\r\n        <span\r\n          onClick={() => showDeleteIcon(!deleteIcon)}\r\n          className={alarmCharacter ? \"alarmLight\" : \"\"}\r\n          id={`${itemId}_${characterName}`}\r\n          data-options={itemId}\r\n        >\r\n          {characterName}\r\n        </span>\r\n        {(attributeChanged || weeklyAttributeChanged) && (\r\n          <Icon\r\n            name=\"edit\"\r\n            size=\"small\"\r\n            style={{ color: \"springgreen\", marginLeft: \"3px\" }}\r\n          />\r\n        )}\r\n        {deleteIcon && (\r\n          <Popup\r\n            trigger={\r\n              <Icon\r\n                name=\"trash\"\r\n                color=\"red\"\r\n                style={{ cursor: \"pointer\", marginLeft: \"1px\" }}\r\n                onClick={() => deleteCharacter(itemId)}\r\n              />\r\n            }\r\n            content={`'${characterName}'에 대한 정보를 삭제하시겠습니까?`}\r\n          />\r\n        )}\r\n        {showDontChange && (\r\n          <Popup\r\n            trigger={\r\n              <Icon\r\n                name={dontChangeState ? \"bell\" : \"bell slash\"}\r\n                color=\"yellow\"\r\n                style={{ cursor: \"pointer\", marginLeft: \"1px\" }}\r\n                onClick={() => dontChangeCharacter(itemId)}\r\n              />\r\n            }\r\n            content={\r\n              dontChangeState\r\n                ? `'${characterName}' 휴식게이지 고정취소`\r\n                : `'${characterName}' 휴식게이지 고정`\r\n            }\r\n          />\r\n        )}\r\n      </Grid.Column>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CharacterAvatar;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Grid, TextArea, Icon } from 'semantic-ui-react';\r\n\r\nfunction PerIdNote({ item, userTodoData, setUserTodoData }) {\r\n  const [showTextArea, setShowTextArea] = useState(false);\r\n  const [textValue, setTextValue] = useState(item.note);\r\n\r\n  const dontChangeCharacter = (id, theText) => {\r\n    const indexValue = userTodoData.findIndex((anItem) => {\r\n      return anItem._id === id;\r\n    });\r\n    let newArr = [...userTodoData];\r\n    newArr[indexValue]['note'] = theText;\r\n    newArr[indexValue]['attributeChanged'] = true;\r\n    setUserTodoData(newArr);\r\n  };\r\n\r\n  const changeText = (event) => {\r\n    console.log(event);\r\n    if (event.target.value.length > 20) return;\r\n    setTextValue(event.target.value);\r\n    dontChangeCharacter(item._id, event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Grid.Column>\r\n      {!showTextArea ? (\r\n        <>\r\n          {item.note}{' '}\r\n          <Icon\r\n            inverted\r\n            name='pencil square'\r\n            color='pink'\r\n            onClick={() => setShowTextArea(!showTextArea)}\r\n            style={{ cursor: 'pointer' }}\r\n          />\r\n        </>\r\n      ) : (\r\n        <TextArea value={textValue} onChange={(event) => changeText(event)} />\r\n      )}\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nexport default PerIdNote;\r\n","import React, { useState } from \"react\";\r\nimport { Grid, Dropdown } from \"semantic-ui-react\";\r\n\r\nfunction ChaosDunValue({ chaosItem, userTodoData, setUserTodoData }) {\r\n  const options = [\r\n    { key: `${chaosItem._id}_1`, text: \"0회\", value: 0 },\r\n    { key: `${chaosItem._id}_2`, text: \"1회\", value: 1 },\r\n    { key: `${chaosItem._id}_3`, text: \"2회\", value: 2 },\r\n  ];\r\n\r\n  const [chaosData, setChaosData] = useState(chaosItem.chaosDone);\r\n\r\n  const changeData = (event, data) => {\r\n    setChaosData(data.value);\r\n    const indexValue = userTodoData.findIndex((anItem) => {\r\n      return anItem._id === chaosItem._id;\r\n    });\r\n    let newArr = [...userTodoData];\r\n    newArr[indexValue].chaosDone = data.value;\r\n    newArr[indexValue][\"attributeChanged\"] = true;\r\n    setUserTodoData(newArr);\r\n  };\r\n\r\n  return (\r\n    <Grid.Column style={{ paddingTop: \"1px\" }}>\r\n      <Dropdown\r\n        options={options}\r\n        name=\"chaosDun\"\r\n        onChange={(event, data) => changeData(event, data)}\r\n        value={chaosData}\r\n      />\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nfunction GuardianDunValue({ guardianItem, userTodoData, setUserTodoData }) {\r\n  const options = [\r\n    { key: `${guardianItem._id}_1`, text: \"0회\", value: 0 },\r\n    { key: `${guardianItem._id}_2`, text: \"1회\", value: 1 },\r\n    { key: `${guardianItem._id}_3`, text: \"2회\", value: 2 },\r\n  ];\r\n\r\n  const [guardianData, setGuardianData] = useState(guardianItem.guardianDone);\r\n\r\n  const changeData = (event, data) => {\r\n    setGuardianData(data.value);\r\n    const indexValue = userTodoData.findIndex((anItem) => {\r\n      return anItem._id === guardianItem._id;\r\n    });\r\n    let newArr = [...userTodoData];\r\n    newArr[indexValue].guardianDone = data.value;\r\n    newArr[indexValue][\"attributeChanged\"] = true;\r\n    setUserTodoData(newArr);\r\n  };\r\n\r\n  return (\r\n    <Grid.Column style={{ paddingTop: \"1px\" }}>\r\n      <Dropdown\r\n        options={options}\r\n        name=\"guardianDun\"\r\n        onChange={(event, data) => changeData(event, data)}\r\n        value={guardianData}\r\n      />\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nfunction EponaValue({ eponaItem, userTodoData, setUserTodoData }) {\r\n  const options = [\r\n    { key: `${eponaItem._id}_1`, text: \"0회\", value: 0 },\r\n    { key: `${eponaItem._id}_2`, text: \"1회\", value: 1 },\r\n    { key: `${eponaItem._id}_3`, text: \"2회\", value: 2 },\r\n    { key: `${eponaItem._id}_4`, text: \"3회\", value: 3 },\r\n  ];\r\n\r\n  const [eponaData, setEponaData] = useState(eponaItem.eponaDone);\r\n\r\n  const changeData = (event, data) => {\r\n    setEponaData(data.value);\r\n    const indexValue = userTodoData.findIndex((anItem) => {\r\n      return anItem._id === eponaItem._id;\r\n    });\r\n    let newArr = [...userTodoData];\r\n    newArr[indexValue].eponaDone = data.value;\r\n    newArr[indexValue][\"attributeChanged\"] = true;\r\n    setUserTodoData(newArr);\r\n  };\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <Dropdown\r\n        options={options}\r\n        name=\"epona\"\r\n        onChange={(event, data) => changeData(event, data)}\r\n        value={eponaData}\r\n      />\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nfunction WeeklyGuardian({ weeklyGuardianItem, userTodoData, setUserTodoData }) {\r\n  const options = [\r\n    { key: `${weeklyGuardianItem._id}_1`, text: \"0회\", value: 0 },\r\n    { key: `${weeklyGuardianItem._id}_2`, text: \"1회\", value: 1 },\r\n    { key: `${weeklyGuardianItem._id}_3`, text: \"2회\", value: 2 },\r\n    { key: `${weeklyGuardianItem._id}_4`, text: \"3회\", value: 3 },\r\n  ];\r\n\r\n  const [weeklyGuardianData, setWeeklyGuardianData] = useState(\r\n    weeklyGuardianItem.guardianWeeklyDone\r\n  );\r\n\r\n  const changeData = (event, data) => {\r\n    setWeeklyGuardianData(data.value);\r\n    const indexValue = userTodoData.findIndex((anItem) => {\r\n      return anItem._id === weeklyGuardianItem._id;\r\n    });\r\n    let newArr = [...userTodoData];\r\n    newArr[indexValue].guardianWeeklyDone = data.value;\r\n    newArr[indexValue][\"attributeChanged\"] = true;\r\n    setUserTodoData(newArr);\r\n  };\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <Dropdown\r\n        options={options}\r\n        name=\"weeklyGuardian\"\r\n        onChange={(event, data) => changeData(event, data)}\r\n        value={weeklyGuardianData}\r\n      />\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nexport { ChaosDunValue, GuardianDunValue, EponaValue, WeeklyGuardian };\r\n","import React, { useState } from 'react';\r\nimport { Grid, Checkbox, Dropdown, Label } from 'semantic-ui-react';\r\n\r\nconst changeDatafunction = (\r\n  event,\r\n  data,\r\n  setItem,\r\n  userTodoData,\r\n  setUserTodoData,\r\n  findIndexItem,\r\n  changeItem\r\n) => {\r\n  setItem(data.checked);\r\n  const indexValue = userTodoData.findIndex((anItem) => {\r\n    return anItem._id === findIndexItem._id;\r\n  });\r\n  let newArr = [...userTodoData];\r\n  newArr[indexValue][changeItem] = data.checked;\r\n  let attrChanged =\r\n    changeItem === 'abyssDungeonWeekly'\r\n      ? 'weeklyAttributeChanged'\r\n      : 'attributeChanged';\r\n  newArr[indexValue][attrChanged] = true;\r\n  setUserTodoData(newArr);\r\n};\r\n\r\nfunction AbyssDun2({ abyssDun2Item, userTodoData, setUserTodoData }) {\r\n  const [abyssDun2, setAbyssDun2] = useState(abyssDun2Item.abyssDungeon2);\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <Checkbox\r\n        name='AbyssDun2'\r\n        onChange={(event, data) =>\r\n          changeDatafunction(\r\n            event,\r\n            data,\r\n            setAbyssDun2,\r\n            userTodoData,\r\n            setUserTodoData,\r\n            abyssDun2Item,\r\n            'abyssDungeon2'\r\n          )\r\n        }\r\n        checked={abyssDun2}\r\n      />\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nfunction AbyssRaid({ idx, abyssRaidItem, userTodoData, setUserTodoData }) {\r\n  const [abyssRaid, setAbyssRaid] = useState(abyssRaidItem.abyssDungeonWeekly);\r\n\r\n  return (\r\n    idx === 0 && (\r\n      <Grid.Column style={{ display: 'flex' }}>\r\n        <Checkbox\r\n          name='AbyssRaid'\r\n          onChange={(event, data) =>\r\n            changeDatafunction(\r\n              event,\r\n              data,\r\n              setAbyssRaid,\r\n              userTodoData,\r\n              setUserTodoData,\r\n              abyssRaidItem,\r\n              'abyssDungeonWeekly'\r\n            )\r\n          }\r\n          checked={abyssRaid}\r\n        />\r\n      </Grid.Column>\r\n    )\r\n  );\r\n}\r\n\r\nfunction RehearsalAndDejavu({\r\n  rehearsalAndDejavuItem,\r\n  userTodoData,\r\n  setUserTodoData,\r\n  idx,\r\n}) {\r\n  const options_combo1 = [\r\n    { key: 'kukuseitn', text: '쿠크리허설', value: 'kukuseitn' },\r\n    { key: 'abrel', text: '아브렐데쟈뷰', value: 'abrel' },\r\n  ];\r\n  const [rehearsalAndDejavu, setRehearsalAndDejavu] = useState(\r\n    rehearsalAndDejavuItem.rehearsalAndDejavu\r\n  );\r\n\r\n  const changeData = (event, data) => {\r\n    setRehearsalAndDejavu(data.value);\r\n    const indexValue = userTodoData.findIndex((anItem) => {\r\n      return anItem._id === rehearsalAndDejavuItem._id;\r\n    });\r\n    let newArr = [...userTodoData];\r\n    newArr[indexValue].rehearsalAndDejavu = data.value;\r\n    newArr[indexValue].weeklyAttributeChanged = true;\r\n    setUserTodoData(newArr);\r\n  };\r\n\r\n  return (\r\n    idx === 0 && (\r\n      <>\r\n        <Grid.Column width={3}>\r\n          <Dropdown\r\n            placeholder='쿠크/아브렐'\r\n            fluid\r\n            multiple\r\n            selection\r\n            options={options_combo1}\r\n            value={rehearsalAndDejavu}\r\n            onChange={(event, data) => changeData(event, data)}\r\n          />\r\n        </Grid.Column>\r\n      </>\r\n    )\r\n  );\r\n}\r\n\r\nfunction ArgosRaid({ argosRaidItem, userTodoData, setUserTodoData }) {\r\n  const [argosRaid, setArgosRaid] = useState(argosRaidItem.argos);\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <Checkbox\r\n        name='ArgosRaid'\r\n        onChange={(event, data) =>\r\n          changeDatafunction(\r\n            event,\r\n            data,\r\n            setArgosRaid,\r\n            userTodoData,\r\n            setUserTodoData,\r\n            argosRaidItem,\r\n            'argos'\r\n          )\r\n        }\r\n        checked={argosRaid}\r\n      />\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nfunction BaltanRaid({ baltanRaidItem, userTodoData, setUserTodoData }) {\r\n  const [baltanRaid, setBaltanRaid] = useState(baltanRaidItem.baltan);\r\n\r\n  const options = [\r\n    { text: '1관문', value: 1 },\r\n    { text: '2관문', value: 2 },\r\n    { text: '3관문', value: 3 },\r\n  ];\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <Checkbox\r\n        name='BaltanRaid'\r\n        onChange={(event, data) =>\r\n          changeDatafunction(\r\n            event,\r\n            data,\r\n            setBaltanRaid,\r\n            userTodoData,\r\n            setUserTodoData,\r\n            baltanRaidItem,\r\n            'baltan'\r\n          )\r\n        }\r\n        checked={baltanRaid}\r\n      />\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nfunction BiakissRaid({ biakissRaidItem, userTodoData, setUserTodoData }) {\r\n  const [biakissRaid, setBiakissRaid] = useState(biakissRaidItem.biakiss);\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <Checkbox\r\n        name='BiakissRaid'\r\n        onChange={(event, data) =>\r\n          changeDatafunction(\r\n            event,\r\n            data,\r\n            setBiakissRaid,\r\n            userTodoData,\r\n            setUserTodoData,\r\n            biakissRaidItem,\r\n            'biakiss'\r\n          )\r\n        }\r\n        checked={biakissRaid}\r\n      />\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nfunction KukseitnRaid({ kukseitnRaidItem, userTodoData, setUserTodoData }) {\r\n  const [kukseitnRaid, setKukseitnRaid] = useState(kukseitnRaidItem.kukuseitn);\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <Checkbox\r\n        name='KukseitnRaid'\r\n        onChange={(event, data) =>\r\n          changeDatafunction(\r\n            event,\r\n            data,\r\n            setKukseitnRaid,\r\n            userTodoData,\r\n            setUserTodoData,\r\n            kukseitnRaidItem,\r\n            'kukuseitn'\r\n          )\r\n        }\r\n        checked={kukseitnRaid}\r\n      />\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nfunction AbrelRaid({ abrelRaidItem, userTodoData, setUserTodoData }) {\r\n  const [abrelRaid, setAbrelRaid] = useState(abrelRaidItem.abrel);\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <Checkbox\r\n        name='AbrelRaid'\r\n        onChange={(event, data) =>\r\n          changeDatafunction(\r\n            event,\r\n            data,\r\n            setAbrelRaid,\r\n            userTodoData,\r\n            setUserTodoData,\r\n            abrelRaidItem,\r\n            'abrel'\r\n          )\r\n        }\r\n        checked={abrelRaid}\r\n      />\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nexport {\r\n  AbyssDun2,\r\n  AbyssRaid,\r\n  RehearsalAndDejavu,\r\n  ArgosRaid,\r\n  BaltanRaid,\r\n  BiakissRaid,\r\n  KukseitnRaid,\r\n  AbrelRaid,\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport './CharacterToDo.css';\r\nimport AddCharacter from '../Utils/AddCharacter';\r\n\r\nimport {\r\n  Header,\r\n  Button,\r\n  Segment,\r\n  Grid,\r\n  Container,\r\n  Icon,\r\n  Dimmer,\r\n  Loader,\r\n  Pagination,\r\n  Image,\r\n  Divider,\r\n} from 'semantic-ui-react';\r\nimport RestValue from '../GridItem/RestValue';\r\nimport CharacterAvatar from './CharacterAvatar';\r\nimport PerIdNote from './PerIdNote';\r\nimport {\r\n  ChaosDunValue,\r\n  GuardianDunValue,\r\n  EponaValue,\r\n  WeeklyGuardian,\r\n} from '../GridItem/DungeonAndEpona';\r\nimport {\r\n  AbyssDun2,\r\n  AbyssRaid,\r\n  RehearsalAndDejavu,\r\n  ArgosRaid,\r\n  BaltanRaid,\r\n  BiakissRaid,\r\n  KukseitnRaid,\r\n  AbrelRaid,\r\n} from '../GridItem/AbyssAndRaid';\r\nimport axios from 'axios';\r\nimport cookie from 'js-cookie';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nimport backendUrl from '../Utils/ConstVar';\r\n\r\nfunction CharacterToDoRow({ limit, type }) {\r\n  const todayDate = new Date(Date.now());\r\n  const today = `${todayDate.getFullYear()}-${\r\n    todayDate.getMonth() + 1\r\n  }-${todayDate.getDate()}`;\r\n\r\n  const [userTodoData, setUserTodoData] = useState([]);\r\n\r\n  const [addCharacterModal, setAddCharacterModal] = useState(false);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [activePage, setActivePage] = useState(1);\r\n\r\n  const [pagination, setPagination] = useState(0);\r\n\r\n  const history = useHistory();\r\n\r\n  const addCharacter = () => {\r\n    setAddCharacterModal(true);\r\n  };\r\n\r\n  const closeAddCharacter = () => {\r\n    setAddCharacterModal(false);\r\n  };\r\n\r\n  const axiosConfig = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${cookie.get('loadoUserToken')}`,\r\n    },\r\n  };\r\n\r\n  const viewPage = async (minusOne = false, plusOne = false, plusPage = 0) => {\r\n    setLoading(true);\r\n    setUserTodoData([]);\r\n\r\n    let searchString = `${backendUrl}/loado/api/homeworks?limit=${limit}&page=${activePage}`;\r\n    if (minusOne) {\r\n      searchString = `${backendUrl}/loado/api/homeworks?limit=${limit}&page=${\r\n        activePage - 1\r\n      }`;\r\n      setActivePage(activePage - 1);\r\n    } else if (plusOne) {\r\n      searchString = `${backendUrl}/loado/api/homeworks?limit=${limit}&page=${\r\n        Math.floor(plusPage / limit) + 1\r\n      }`;\r\n      setActivePage(Math.floor(plusPage / limit) + 1);\r\n    }\r\n\r\n    await axios\r\n      .get(searchString, axiosConfig)\r\n      .then((response) => {\r\n        setUserTodoData(response.data.data);\r\n\r\n        const totalLength = response.data.totalLength;\r\n        if (totalLength) {\r\n          const totalPage =\r\n            totalLength / limit - Math.floor(totalLength / limit) > 0\r\n              ? Math.floor(totalLength / limit) + 1\r\n              : Math.floor(totalLength / limit);\r\n          setPagination(totalPage);\r\n        } else {\r\n          setPagination(1);\r\n        }\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        toast.error('데이터를 불러오지 못했습니다', {\r\n          position: toast.POSITION.BOTTOM_LEFT,\r\n        });\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const applyChanges = async () => {\r\n    setLoading(true);\r\n    let errorOccured = false;\r\n\r\n    let submitData = userTodoData.filter(\r\n      (item) => item.attributeChanged === true\r\n    );\r\n\r\n    for (let index = 0; index < submitData.length; index++) {\r\n      await axios\r\n        .put(\r\n          `${backendUrl}/loado/api/homeworks/${submitData[index]._id}`,\r\n          {\r\n            data: submitData[index],\r\n          },\r\n          axiosConfig\r\n        )\r\n        .then((response) => {})\r\n        .catch((err) => {\r\n          errorOccured = true;\r\n        });\r\n    }\r\n    // let weeklySubmitData = userTodoData.filter(\r\n    //   (item) => item.weeklyAttributeChanged === true\r\n    // );\r\n    // if (weeklySubmitData.length !== 0) {\r\n    //   await axios\r\n    //     .put(\r\n    //       `${backendUrl}/loado/api/homeworks/${weeklySubmitData[0]._id}`,\r\n    //       {\r\n    //         data: weeklySubmitData[0],\r\n    //       },\r\n    //       axiosConfig\r\n    //     )\r\n    //     .then((response) => {})\r\n    //     .catch((err) => {\r\n    //       errorOccured = true;\r\n    //     });\r\n    // }\r\n    setLoading(false);\r\n    if (errorOccured) {\r\n      toast.error('일부 변경사항이 제대로 반영되지 않았습니다', {\r\n        position: toast.POSITION.BOTTOM_LEFT,\r\n      });\r\n    }\r\n    viewPage();\r\n  };\r\n\r\n  const pageChange = async (event, data) => {\r\n    setLoading(true);\r\n    setActivePage(data.activePage);\r\n\r\n    // 샙트님 이거 2페이지에 있는 캐릭터 바꾸면 1페이지 같은 자리 있는것두 바뀌는거 같아여\r\n    // 이거 안 해주면 현재 페이지에서 바꾼 ID위치의 정보가 그대로 남아서 사용자에게 모든 페이지의 변경사항이 반영되는 것처럼 보임\r\n    setUserTodoData([]);\r\n\r\n    await axios\r\n      .get(\r\n        `${backendUrl}/loado/api/homeworks?limit=${limit}&page=${data.activePage}`,\r\n        axiosConfig\r\n      )\r\n      .then((response) => {\r\n        setUserTodoData(response.data.data);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        toast.error('데이터를 불러오지 못했습니다', {\r\n          position: toast.POSITION.BOTTOM_LEFT,\r\n        });\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  // for alarm animation\r\n  const [alarmTrue, setAlarmTrue] = useState(true);\r\n\r\n  // for note per list\r\n  const [showNote, setShowNote] = useState(false);\r\n\r\n  const alarmRestValue = (todoList) => {\r\n    // 알람 중지\r\n    if (!alarmTrue) {\r\n      const alarmList1 = todoList.map((item, idx) => {\r\n        item.alarmCharacter = false;\r\n        return item;\r\n      });\r\n      setUserTodoData(alarmList1);\r\n      setAlarmTrue(true);\r\n    }\r\n    // 알람 온\r\n    else {\r\n      const alarmList = todoList.map((item, idx) => {\r\n        if (\r\n          item.chaosRestValue >= 40 ||\r\n          item.guardianRestValue >= 40 ||\r\n          item.eponaRestValue >= 60\r\n        ) {\r\n          item.alarmCharacter = true;\r\n        }\r\n        return item;\r\n      });\r\n      setUserTodoData(alarmList);\r\n      setAlarmTrue(false);\r\n    }\r\n  };\r\n\r\n  // if no user cookie then redirect to login page\r\n  useEffect(() => {\r\n    let loginCookie = cookie.get('loadoUserToken');\r\n    !loginCookie && history.push('/login');\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    viewPage();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Segment\r\n          className='fullPage'\r\n          style={{ height: '94vh', border: 'none' }}\r\n        >\r\n          <Dimmer active>\r\n            <Loader size='big'>로딩중</Loader>\r\n          </Dimmer>\r\n        </Segment>\r\n      ) : (\r\n        <Grid className='fullPage'>\r\n          <Container\r\n            style={{ width: '95%', marginLeft: '2.5%', marginRight: '2.5%' }}\r\n          >\r\n            <Grid.Column width={16}>\r\n              <Segment\r\n                basic\r\n                className='contentHeader'\r\n                style={{ marginBottom: '0px' }}\r\n              >\r\n                <div className='headerValueStart'>\r\n                  <Header\r\n                    size='medium'\r\n                    style={{ color: 'white', paddingTop: '5px' }}\r\n                  >\r\n                    {today}{' '}\r\n                    {type === 'computer' && (\r\n                      <span style={{ marginLeft: '30px' }}>\r\n                        금일 06:00 ~ 명일 05:59\r\n                      </span>\r\n                    )}\r\n                  </Header>\r\n                </div>\r\n                <div className='headerValueCenter'>\r\n                  <Pagination\r\n                    // defaultActivePage={1}\r\n                    firstItem={null}\r\n                    lastItem={null}\r\n                    pointing\r\n                    secondary\r\n                    totalPages={pagination}\r\n                    activePage={activePage}\r\n                    onPageChange={(event, data) => pageChange(event, data)}\r\n                  />\r\n                </div>\r\n                <div className='headerValueEnd'>\r\n                  <Button inverted color='olive' onClick={addCharacter}>\r\n                    케릭터 추가\r\n                  </Button>\r\n                  <Button inverted color='red' onClick={applyChanges}>\r\n                    변경사항 저장\r\n                  </Button>\r\n                </div>\r\n              </Segment>\r\n              <Segment\r\n                basic\r\n                style={{ backgroundColor: 'dimgray', marginTop: '0px' }}\r\n              >\r\n                <Grid columns={limit + 1}>\r\n                  <Grid.Row\r\n                    style={{ borderBottom: !showNote && '0.05rem inset ivory' }}\r\n                  >\r\n                    <Grid.Column className='contentColumn'>\r\n                      {/* padding got from <Button/> */}\r\n                      <Header\r\n                        as='h4'\r\n                        style={{\r\n                          color: 'white',\r\n                          display: 'flex',\r\n                          padding: '.78571429em 1.5em .78571429em',\r\n                        }}\r\n                      >\r\n                        <div>\r\n                          <Icon\r\n                            className='iconClass'\r\n                            name={alarmTrue ? 'alarm' : 'alarm mute'}\r\n                            onClick={() => alarmRestValue(userTodoData)}\r\n                          />\r\n                          {'  //  '}\r\n                          <Icon\r\n                            className='iconClass'\r\n                            name={\r\n                              !showNote\r\n                                ? 'sticky note outline'\r\n                                : 'angle double up'\r\n                            }\r\n                            onClick={() => setShowNote(!showNote)}\r\n                          />\r\n                        </div>\r\n                      </Header>\r\n                    </Grid.Column>\r\n                    {userTodoData.map((item, idx) => (\r\n                      <CharacterAvatar\r\n                        itemId={item._id}\r\n                        character={item.character}\r\n                        characterName={item.characterName}\r\n                        attributeChanged={item.attributeChanged}\r\n                        weeklyAttributeChanged={item.weeklyAttributeChanged}\r\n                        axiosConfig={axiosConfig}\r\n                        viewPage={viewPage}\r\n                        alarmCharacter={item.alarmCharacter}\r\n                        limit={limit}\r\n                        dontChange={item.dontChange}\r\n                        userTodoData={userTodoData}\r\n                        setUserTodoData={setUserTodoData}\r\n                      />\r\n                    ))}\r\n                  </Grid.Row>\r\n                  {showNote && (\r\n                    <Grid.Row\r\n                      style={{\r\n                        padding: 0,\r\n                        borderBottom: '0.05rem inset ivory',\r\n                        paddingBottom: '7px',\r\n                      }}\r\n                    >\r\n                      <Grid.Column />\r\n                      {userTodoData.map((item, idx) => (\r\n                        <PerIdNote\r\n                          item={item}\r\n                          userTodoData={userTodoData}\r\n                          setUserTodoData={setUserTodoData}\r\n                        />\r\n                      ))}\r\n                    </Grid.Row>\r\n                  )}\r\n                  <Grid.Row className='eachRow'>\r\n                    <Grid.Column className='contentColumn'>\r\n                      <Icon name='calendar check outline' />\r\n                      휴식게이지\r\n                    </Grid.Column>\r\n                    {userTodoData.map((item, idx) => (\r\n                      <RestValue\r\n                        item={item}\r\n                        userTodoData={userTodoData}\r\n                        setUserTodoData={setUserTodoData}\r\n                      />\r\n                    ))}\r\n                  </Grid.Row>\r\n                  <Grid.Row className='eachRow'>\r\n                    <Grid.Column className='contentColumn'>\r\n                      <div>\r\n                        <Image\r\n                          src='./images/loa_icons/chaosDun.png'\r\n                          avatar\r\n                          className='contentImage'\r\n                        />\r\n                        <span>카오스던전</span>\r\n                      </div>\r\n                    </Grid.Column>\r\n                    {userTodoData.map((item, idx) => (\r\n                      <ChaosDunValue\r\n                        chaosItem={item}\r\n                        userTodoData={userTodoData}\r\n                        setUserTodoData={setUserTodoData}\r\n                      />\r\n                    ))}\r\n                  </Grid.Row>\r\n                  <Grid.Row className='eachRow'>\r\n                    <Grid.Column className='contentColumn'>\r\n                      <div>\r\n                        <Image\r\n                          src='./images/loa_icons/guardianDun.png'\r\n                          avatar\r\n                          className='contentImage'\r\n                        />\r\n                        <span>가디언토벌</span>\r\n                      </div>\r\n                    </Grid.Column>\r\n                    {userTodoData.map((item, idx) => (\r\n                      <GuardianDunValue\r\n                        guardianItem={item}\r\n                        userTodoData={userTodoData}\r\n                        setUserTodoData={setUserTodoData}\r\n                      />\r\n                    ))}\r\n                  </Grid.Row>\r\n                  <Grid.Row className='eachRow'>\r\n                    <Grid.Column className='contentColumn'>\r\n                      <div>\r\n                        <Image\r\n                          src='./images/loa_icons/epona.png'\r\n                          avatar\r\n                          className='contentImage'\r\n                        />\r\n                        <span>에포나</span>\r\n                      </div>\r\n                    </Grid.Column>\r\n                    {userTodoData.map((item, idx) => (\r\n                      <EponaValue\r\n                        eponaItem={item}\r\n                        userTodoData={userTodoData}\r\n                        setUserTodoData={setUserTodoData}\r\n                      />\r\n                    ))}\r\n                  </Grid.Row>\r\n                  <Grid.Row className='eachRow'>\r\n                    <Grid.Column className='contentColumn'>\r\n                      <div>\r\n                        <Image\r\n                          src='./images/loa_icons/guardianDun.png'\r\n                          avatar\r\n                          className='contentImage'\r\n                        />\r\n                        <span>주간가디언</span>\r\n                      </div>\r\n                    </Grid.Column>\r\n                    {userTodoData.map((item, idx) => (\r\n                      <WeeklyGuardian\r\n                        weeklyGuardianItem={item}\r\n                        userTodoData={userTodoData}\r\n                        setUserTodoData={setUserTodoData}\r\n                      />\r\n                    ))}\r\n                  </Grid.Row>\r\n                  <Grid.Row className='eachRow'>\r\n                    <Grid.Column className='contentColumn'>\r\n                      <div>\r\n                        <Image\r\n                          src='./images/loa_icons/abyss2types.png'\r\n                          avatar\r\n                          className='contentImage'\r\n                        />\r\n                        <span>오레하2종</span>\r\n                      </div>\r\n                    </Grid.Column>\r\n                    {userTodoData.map((item, idx) => (\r\n                      <AbyssDun2\r\n                        abyssDun2Item={item}\r\n                        userTodoData={userTodoData}\r\n                        setUserTodoData={setUserTodoData}\r\n                      />\r\n                    ))}\r\n                  </Grid.Row>\r\n                  {/* 원정대 주간 컨탠츠는 안 보이게 하기로 결정 */}\r\n                  {/* <Grid.Row className=\"eachRow\">\r\n                    <Grid.Column className=\"contentColumn\">\r\n                      <div>\r\n                        <Image\r\n                          src=\"./images/loa_icons/abyssWeekly.png\"\r\n                          avatar\r\n                          className=\"contentImage\"\r\n                        />\r\n                        <span>어비스레이드</span>\r\n                      </div>\r\n                    </Grid.Column>\r\n                    {userTodoData.map((item, idx) => (\r\n                      <AbyssRaid\r\n                        idx={idx}\r\n                        abyssRaidItem={item}\r\n                        userTodoData={userTodoData}\r\n                        setUserTodoData={setUserTodoData}\r\n                      />\r\n                    ))}\r\n                  </Grid.Row>\r\n                  <Grid.Row className=\"eachRow\">\r\n                    <Grid.Column className=\"contentColumn\">\r\n                      <div>\r\n                        <Image\r\n                          src=\"./images/loa_icons/rehearsal.png\"\r\n                          avatar\r\n                          className=\"contentImage\"\r\n                        />\r\n                        <span>리허설, 데쟈뷰</span>\r\n                      </div>\r\n                    </Grid.Column>\r\n                    {userTodoData.map((item, idx) => (\r\n                      <RehearsalAndDejavu\r\n                        rehearsalAndDejavuItem={item}\r\n                        idx={idx}\r\n                        userTodoData={userTodoData}\r\n                        setUserTodoData={setUserTodoData}\r\n                      />\r\n                    ))}\r\n                  </Grid.Row> */}\r\n                  <Grid.Row className='eachRow'>\r\n                    <Grid.Column className='contentColumn'>\r\n                      <div>\r\n                        <Image\r\n                          src='./images/loa_icons/argos.png'\r\n                          avatar\r\n                          className='contentImage'\r\n                        />\r\n                        <span>아르고스</span>\r\n                      </div>\r\n                    </Grid.Column>\r\n                    {userTodoData.map((item, idx) => (\r\n                      <ArgosRaid\r\n                        argosRaidItem={item}\r\n                        userTodoData={userTodoData}\r\n                        setUserTodoData={setUserTodoData}\r\n                      />\r\n                    ))}\r\n                  </Grid.Row>\r\n                  <Grid.Row className='eachRow'>\r\n                    <Grid.Column className='contentColumn'>\r\n                      <div>\r\n                        <Image\r\n                          src='./images/loa_icons/baltan.png'\r\n                          avatar\r\n                          className='contentImage'\r\n                        />\r\n                        <span>발탄</span>\r\n                      </div>\r\n                    </Grid.Column>\r\n                    {userTodoData.map((item, idx) => (\r\n                      <BaltanRaid\r\n                        baltanRaidItem={item}\r\n                        userTodoData={userTodoData}\r\n                        setUserTodoData={setUserTodoData}\r\n                      />\r\n                    ))}\r\n                  </Grid.Row>\r\n                  <Grid.Row className='eachRow'>\r\n                    <Grid.Column className='contentColumn'>\r\n                      <div>\r\n                        <Image\r\n                          src='./images/loa_icons/biakiss.png'\r\n                          avatar\r\n                          className='contentImage'\r\n                        />\r\n                        <span>비아키스</span>\r\n                      </div>\r\n                    </Grid.Column>\r\n                    {userTodoData.map((item, idx) => (\r\n                      <BiakissRaid\r\n                        biakissRaidItem={item}\r\n                        userTodoData={userTodoData}\r\n                        setUserTodoData={setUserTodoData}\r\n                      />\r\n                    ))}\r\n                  </Grid.Row>\r\n                  <Grid.Row className='eachRow'>\r\n                    <Grid.Column className='contentColumn'>\r\n                      <div>\r\n                        <Image\r\n                          src='./images/loa_icons/kukuseitn.png'\r\n                          avatar\r\n                          className='contentImage'\r\n                        />\r\n                        <span>쿠크세이튼</span>\r\n                      </div>\r\n                    </Grid.Column>\r\n                    {userTodoData.map((item, idx) => (\r\n                      <KukseitnRaid\r\n                        kukseitnRaidItem={item}\r\n                        userTodoData={userTodoData}\r\n                        setUserTodoData={setUserTodoData}\r\n                      />\r\n                    ))}\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column className='contentColumn'>\r\n                      <div>\r\n                        <Image\r\n                          src='./images/loa_icons/abrel.png'\r\n                          avatar\r\n                          className='contentImage'\r\n                        />\r\n                        <span>아브렐슈드</span>\r\n                      </div>\r\n                    </Grid.Column>\r\n                    {userTodoData.map((item, idx) => (\r\n                      <AbrelRaid\r\n                        abrelRaidItem={item}\r\n                        userTodoData={userTodoData}\r\n                        setUserTodoData={setUserTodoData}\r\n                      />\r\n                    ))}\r\n                  </Grid.Row>\r\n                </Grid>\r\n              </Segment>\r\n            </Grid.Column>\r\n          </Container>\r\n        </Grid>\r\n      )}\r\n\r\n      <AddCharacter\r\n        addCharacterModal={addCharacterModal}\r\n        closeAddCharacter={closeAddCharacter}\r\n        userTodoData={userTodoData}\r\n        axiosConfig={axiosConfig}\r\n        viewPage={viewPage}\r\n        limit={limit}\r\n      />\r\n      <ToastContainer autoClose={3000} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CharacterToDoRow;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Grid,\r\n  Header,\r\n  Image,\r\n  Message,\r\n  Segment,\r\n} from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\nimport cookie from \"js-cookie\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport backendUrl from \"../Utils/ConstVar\";\r\n\r\nfunction Login() {\r\n  const history = useHistory();\r\n  const [loginMessage, setLoginMessage] = useState(\"로그인이 필요합니다\");\r\n  const [user, setUser] = useState({\r\n    id: cookie.get(\"loginId\") ? cookie.get(\"loginId\") : \"\",\r\n    password: \"\",\r\n  });\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUser((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const axiosConfig = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n      .post(\r\n        `${backendUrl}/loado/api/users/login`,\r\n        {\r\n          userId: user.id,\r\n          password: user.password,\r\n        },\r\n        axiosConfig\r\n      )\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          const token = response.data.token;\r\n          cookie.set(\"loadoUserToken\", token);\r\n          const userCookie = {\r\n            userId: user.id,\r\n            userName: response.data.userName,\r\n          };\r\n          cookie.set(\"loadoUserCookie\", JSON.stringify(userCookie));\r\n          history.push(\"/userhomework\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.request);\r\n        // console.log(err.response);\r\n        // console.log(err.message);\r\n        setLoginMessage(err.response.data.error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        textAlign=\"center\"\r\n        style={{ height: \"100vh\", marginTop: \"0\", backgroundColor: \"dimgray\" }}\r\n        verticalAlign=\"middle\"\r\n      >\r\n        <Grid.Column style={{ maxWidth: 500 }}>\r\n          <Header as=\"h2\" textAlign=\"center\" style={{ color: \"white\" }}>\r\n            <Image src=\"https://react.semantic-ui.com/logo.png\" />{\" \"}\r\n            {loginMessage}\r\n          </Header>\r\n          <Form size=\"large\" onSubmit={handleSubmit}>\r\n            <Segment stacked>\r\n              <Form.Input\r\n                fluid\r\n                icon=\"user\"\r\n                iconPosition=\"left\"\r\n                placeholder=\"ID\"\r\n                name=\"id\"\r\n                onChange={handleChange}\r\n                value={user.id}\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                icon=\"lock\"\r\n                iconPosition=\"left\"\r\n                placeholder=\"비밀번호\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                onChange={handleChange}\r\n              />\r\n\r\n              <Button color=\"teal\" fluid size=\"large\" type=\"submit\">\r\n                로그인\r\n              </Button>\r\n            </Segment>\r\n          </Form>\r\n          <Message>\r\n            계정이 없으신가요?{\" \"}\r\n            <a href=\"#\" onClick={() => history.push(\"/register\")}>\r\n              가입\r\n            </a>\r\n          </Message>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Grid,\r\n  Header,\r\n  Image,\r\n  Message,\r\n  Segment,\r\n} from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\nimport cookie from \"js-cookie\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport backendUrl from \"../Utils/ConstVar\";\r\n\r\nfunction Register() {\r\n  const history = useHistory();\r\n  const [loginMessage, setLoginMessage] = useState(\"회원가입\");\r\n  const [user, setUser] = useState({\r\n    id: \"\",\r\n    password: \"\",\r\n    name: \"\",\r\n  });\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUser((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const axiosConfig = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n      .post(\r\n        `${backendUrl}/loado/api/users/register`,\r\n        {\r\n          userId: user.id,\r\n          password: user.password,\r\n          name: user.name,\r\n        },\r\n        axiosConfig\r\n      )\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          const token = response.data.token;\r\n          cookie.set(\"loadoUserToken\", token);\r\n          const userCookie = {\r\n            userId: user.id,\r\n            userName: response.data.userName,\r\n          };\r\n          cookie.set(\"loadoUserCookie\", JSON.stringify(userCookie));\r\n          history.push(\"/userhomework\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoginMessage(err.response.data.error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        textAlign=\"center\"\r\n        style={{ height: \"100vh\", marginTop: \"0\", backgroundColor: \"dimgray\" }}\r\n        verticalAlign=\"middle\"\r\n      >\r\n        <Grid.Column style={{ maxWidth: 500 }}>\r\n          <Header as=\"h2\" textAlign=\"center\" style={{ color: \"white\" }}>\r\n            <Image src=\"https://react.semantic-ui.com/logo.png\" />{\" \"}\r\n            {loginMessage}\r\n          </Header>\r\n          <Form size=\"large\" onSubmit={handleSubmit}>\r\n            <Segment stacked>\r\n              <Form.Input\r\n                fluid\r\n                icon=\"user\"\r\n                iconPosition=\"left\"\r\n                placeholder=\"ID\"\r\n                name=\"id\"\r\n                onChange={handleChange}\r\n                value={user.id}\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                icon=\"lock\"\r\n                iconPosition=\"left\"\r\n                placeholder=\"비밀번호\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                onChange={handleChange}\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                icon=\"quote left\"\r\n                iconPosition=\"left\"\r\n                placeholder=\"이름\"\r\n                name=\"name\"\r\n                onChange={handleChange}\r\n                value={user.name}\r\n              />\r\n\r\n              <Button color=\"teal\" fluid size=\"large\" type=\"submit\">\r\n                가입\r\n              </Button>\r\n            </Segment>\r\n          </Form>\r\n          <Message>비밀번호를 잊어버리시면 복구가 불가능합니다</Message>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","import \"./App.css\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport NavHeader from \"./Components/Nav/NavHeader\";\r\nimport CharacterToDo from \"./Components/Home/CharacterToDo\";\r\nimport CharacterToDoRow from \"./Components/Home/CharacterToDoRow\";\r\nimport Login from \"./Components/Home/Login\";\r\nimport Register from \"./Components/Home/Register\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { createMedia } from \"@artsy/fresnel\";\r\n\r\nconst AppMedia = createMedia({\r\n  breakpoints: { zero: 0, mobile: 549, tablet: 850, computer: 1080 },\r\n});\r\n\r\nconst mediaStyles = AppMedia.createMediaStyle();\r\nconst { Media, MediaContextProvider } = AppMedia;\r\n\r\nfunction App() {\r\n  return (\r\n    <MediaContextProvider>\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/userhomework\">\r\n            <>\r\n              <Grid stackable style={{ border: \"none\" }}>\r\n                <Grid.Row\r\n                  style={{\r\n                    paddingBottom: \"0rem\",\r\n                    background: \"lightCoral\",\r\n                  }}\r\n                >\r\n                  <Grid.Column style={{ border: \"none\" }}>\r\n                    <NavHeader />\r\n                  </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row\r\n                  style={{\r\n                    paddingBottom: \"0rem\",\r\n                    paddingTop: \"0rem\",\r\n                    height: \"94vh\",\r\n                    backgroundColor: \"#384862\",\r\n                  }}\r\n                >\r\n                  <Grid.Column>\r\n                    <Media between={[\"zero\", \"tablet\"]}>\r\n                      <CharacterToDoRow limit={4} type=\"mobile\" />\r\n                    </Media>\r\n                    <Media between={[\"tablet\", \"computer\"]}>\r\n                      <CharacterToDoRow limit={6} type=\"mobile\" />\r\n                    </Media>\r\n                    <Media greaterThanOrEqual=\"computer\">\r\n                      <CharacterToDoRow limit={8} type=\"computer\" />\r\n                    </Media>\r\n                  </Grid.Column>\r\n                </Grid.Row>\r\n              </Grid>\r\n            </>\r\n          </Route>\r\n          <Route path=\"/login\">\r\n            <Login />\r\n          </Route>\r\n          <Route path=\"/register\">\r\n            <Register />\r\n          </Route>\r\n          <Route path=\"/\" exact>\r\n            <Login />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </MediaContextProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}